Simulation of digital counter circuit synthesized with Yosys

** opencircuitdesign pdks install
{ifdef foss}
.lib "/foss/pdk/sky130A/libs.tech/ngspice/sky130.lib.spice" {corner=tt}
.include "/foss/pdk/sky130A/libs.ref/sky130_fd_sc_hs/spice/sky130_fd_sc_hs.spice"
{else}
.lib "models/sky130.lib.spice" {corner=tt}
.include cells/a21oi/sky130_fd_sc_hs__a21oi_1.spice
.include cells/and2/sky130_fd_sc_hs__and2_1.spice
.include cells/and3/sky130_fd_sc_hs__and3_1.spice
.include cells/and4/sky130_fd_sc_hs__and4_1.spice
.include cells/clkinv/sky130_fd_sc_hs__clkinv_1.spice
.include cells/dfxtp/sky130_fd_sc_hs__dfxtp_1.spice
.include cells/inv/sky130_fd_sc_hs__inv_1.spice
.include cells/mux2i/sky130_fd_sc_hs__mux2i_1.spice
.include cells/nor2b/sky130_fd_sc_hs__nor2b_1.spice
.include cells/nor2/sky130_fd_sc_hs__nor2_1.spice
.include cells/nor3/sky130_fd_sc_hs__nor3_1.spice
.include cells/o21a/sky130_fd_sc_hs__o21a_1.spice
.include cells/o21bai/sky130_fd_sc_hs__o21bai_1.spice
.include cells/o21ba/sky130_fd_sc_hs__o21ba_1.spice
{endif}

** local libraries
.include lib/register_array.spice
.include lib/negedge_detector.spice

* Instantiate counter module
{ifdef halfcounter}
.include lib/counter_half.spice
;XCOUNTER clk reset vdd vss vss vss vss vss vss vss vss vss count.0 count.1 count.2 count.3 count.4 count.5 count.6 count.7 overflow vss vss vdd vdd counter_half 
XCOUNTER clk reset cen count.0 count.1 count.2 count.3 count.4 count.5 count.6 count.7 overflow vss vss vdd vdd counter_half 
xcen    reset vss vss vdd vdd cen_d sky130_fd_sc_hs__inv_1
xcen_ff clk cen_d vss vss vdd vdd cen sky130_fd_sc_hs__dfxtp_1
{else}
.include lib/counter.spice
XCOUNTER clk reset count.0 count.1 count.2 count.3 count.4 count.5 count.6 count.7 vss vss vdd vdd counter
{endif}

* Instantiate edge detector module (detects negative edges of comparator signals)
XEDGE_DETECTOR clk reset comp.0_buffered enable vss vss vdd vdd negedge_detector

* Instantiate registers module (stores values based on edge detector output)
XREGISTER_ARRAY clk reset enable count.0 count.1 count.2 count.3 count.4 count.5 count.6 count.7 stored_values.0 stored_values.1 stored_values.2 stored_values.3 stored_values.4 stored_values.5 stored_values.6 stored_values.7 vss vss vdd vdd register_array

{ifdef protected}
XEDGE_DETECTOR_P clk reset comp.0_buffered_p enable_p vss vss vdd vdd negedge_detector
XREGISTER_ARRAY_P clk reset enable_p count.0 count.1 count.2 count.3 count.4 count.5 count.6 count.7 stored_values.0 stored_values.1 stored_values.2 stored_values.3 stored_values.4 stored_values.5 stored_values.6 stored_values.7 vss vss vdd vdd register_array
{endif}

* ! Synthesizer optimizes the inversion in Verilog input. Inverters added manually for now.
XINV1 comp.0_toggl  vss vss vdd vdd comp.0_1 sky130_fd_sc_hs__inv_1
XINV2 comp.0_1      vss vss vdd vdd comp.0_2 sky130_fd_sc_hs__inv_1
XINV3 comp.0_2      vss vss vdd vdd comp.0_3 sky130_fd_sc_hs__inv_1
XINV4 comp.0_3      vss vss vdd vdd comp.0_buffered sky130_fd_sc_hs__inv_1

{ifdef protected}
XINV1_P comp.0_toggl_p  vss vss vdd vdd comp.0_1_p sky130_fd_sc_hs__inv_1
XINV2_P comp.0_1_p      vss vss vdd vdd comp.0_2_p sky130_fd_sc_hs__inv_1
XINV3_P comp.0_2_p      vss vss vdd vdd comp.0_3_p sky130_fd_sc_hs__inv_1
XINV4_P comp.0_3_p      vss vss vdd vdd comp.0_buffered_p sky130_fd_sc_hs__inv_1
{endif}

* Voltage sources
.param vdd=1.8
Vdd vdd 0 {vdd}

.param vss=0
Vss vss 0 {vss}

** Clock and Reset signals (1MHz clock)
Vrst    reset   0   pulse   {vss}   {vdd}   0u      10n  10n    2u    260u
Vclk    clk     0   pulse   {vss}   {vdd}   1u      10n  10n  0.5u      1u
*Vrst    reset   0   pulse   {vdd}   {vss}   2.2u    10n  10n  258u    260u
*Vclk    clk     0   pulse   {vss}   {vdd}   0u      10n  10n  0.5u      1u

* Comparator signal (example: 1 comparators with random outputs)
* Here, we simulate random '1's and '0's for comparators, adjust as needed
Vcomp0 comp.0_ideal 0 pulse {vss} {vdd} 32u 5n 5n 224u 260u
Bcomp0 comp.0_toggl 0 V = V(comp.0_ideal) > {vdd/2} ? V(clk) : {vss}
{ifdef protected}
Bcomp0_p comp.0_toggl_p 0 V = V(comp.0_ideal) > {vdd/2} ? {vss} : V(clk)
{endif}

** Simulation settings
*.control
*.option KLU
*.option skywaterpdk
*.tran 1n 258u130
*.save i(Vvdd)
*
*.plot v(clk) 2+v(reset) 4+v(comp.0)
*.plot v(count.0) 2+v(count.1) 4+v(count.2) 6+v(count.3) 8+v(count.4) 10+v(count.5) 12+v(count.6) 14+v(count.7)
*.plot v(stored_values.0) 2+v(stored_values.1) 4+v(stored_values.2) 6+v(stored_values.3) 8+v(stored_values.4) 10+v(stored_values.5) 12+v(stored_values.6) 14+v(stored_values.7)
*.endc
.option method=Gear

.control
;set color0=white
set color1=rgb:50/50/50

{randvec_0=compose randvec_0 values 0 128 254 255}

let treset  = 2u
let tgap    = 2u
let period  = 1u
let digmax  = 256
let istart  = 0
let istop   = length(randvec_0)
let tmax    = digmax * period + treset + tgap

set ext = "v.txt"
set dlm = "_"

{ifndef plot}
shell mkdir -p outfiles
set wr_singlescale
set wr_vecnames
{endif}

while istart < istop
    echo
    echo Running Sweep $&istart/$&istop
    echo

    let dvalue = randvec_0[istart]
    let tstart = treset + dvalue * period
    let twidth = tmax - tstart - tgap

    alter @Vcomp0[pulse] [ 0 1.8 $&tstart 5n 5n $&twidth $&tmax ]
    ;run
    tran 500n 520u uic
    
    {ifdef plot}
    plot title 'Current Trace: din=$&dvalue' -I(vdd)
    {else}

    let cut-tstart = 260u
    let cut-tstop = 520u
    cutout

    ; plot I(vdd)
    wrdata outfiles/sky_raw_d$&dvalue$ext -I(vdd) ;digitized

    let lin-tstart = 260u
    let lin-tstop  = 520u
    let lin-tstep  = 100n
    linearize I(vdd) ; digitized

    ; plot I(vdd)
    wrdata outfiles/sky_lin_d$&dvalue$ext -I(vdd) ;digitized

    {else}
    let digit_count = count.0/256 + count.1/128 + count.2/64 + count.3/32 + count.4/16 + count.5/8 + count.6/4 + count.7/2
    let digit_sampl = stored_values.0/256 + stored_values.1/128 + stored_values.2/64 + stored_values.3/32 + stored_values.4/16 + stored_values.5/8 + stored_values.6/4 + stored_values.7/2
    plot title 'Digital Outputs: din=$&dvalue' digit_count digit_sampl reset comp.0_ideal
    {endif}

    let istart = istart + 1

    {ifndef plot destroy all}
end
*exit
.endc

.END

